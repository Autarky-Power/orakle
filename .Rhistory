ggtitle(paste("Complete Model Results -",country,"\n"))+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())+
theme(axis.title=element_text(size=23))+
theme(legend.text=element_text(size=23))+
theme(axis.text=element_text(size=20))+
theme(plot.title = element_text(size=26))
full_plot2
ggsave(file=paste0("./",country,"/plots/complete_model_results.png"), plot=full_plot2, width=12, height=8)
View(combined_model_results)
nrow(combined_model_results)-end_of_training_set
nrow(combined_model_results)-end_of_training_set*0.35
(nrow(combined_model_results)-end_of_training_set)*0.35
sample_week_index <-nrow(combined_model_results)-(nrow(combined_model_results)-end_of_training_set)*0.35
sample_week_index
week_start <- which(combined_model_results$wday[sample_week_index:(sample_week_index+200)]==
"Mon")[1]
week_start
week_start <- which(combined_model_results$wday[sample_week_index:(sample_week_index+200)]==
"Mon")[1]+sample_week_index
week_start
sample_year <- combined_model_results$year[week_start]
sample_year
full_plot_sample_week <- ggplot(combined_model_results[week_start:(week_start+335),])+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("[MW]\n")+
ggtitle(paste("Complete Model Results -",country),subtitle = paste("2 sample weeks in",sample_year,"\n") )+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())
print(st_plot_sample_week)
print(full_plot_sample_week)
sample_week_index <-nrow(combined_model_results)-(nrow(combined_model_results)-end_of_training_set)*0.45
week_start <- which(combined_model_results$wday[sample_week_index:(sample_week_index+200)]==
"Mon")[1]+sample_week_index
sample_year <- combined_model_results$year[week_start]
full_plot_sample_week <- ggplot(combined_model_results[week_start:(week_start+335),])+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("[MW]\n")+
ggtitle(paste("Complete Model Results -",country),subtitle = paste("2 sample weeks in",sample_year,"\n") )+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())
print(full_plot_sample_week)
full_plot_sample_week2 <- ggplot(combined_model_results[week_start:(week_start+335),])+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("[MW]\n")+
ggtitle(paste("Complete Model Results -",country),subtitle = paste("2 sample weeks in",sample_year,"\n") )+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())+
theme(axis.title=element_text(size=23))+
theme(legend.text=element_text(size=23))+
theme(axis.text=element_text(size=20))+
theme(plot.title = element_text(size=26))+
theme(plot.subtitle = element_text(size=20,hjust = 0.5))
full_plot_sample_week2
ggsave(file=paste0("./",country,"/plots/complete_model_sample_weeks.png"), plot=full_plot_sample_week2, width=12, height=8)
stacked_plots <- full_plot/full_plot_sample_week
stacked_plots
stacked_plots2 <- full_plot2/full_plot_sample_week2
stacked_plots2
orakle.combine_models <- function(longterm_all_data_predicted,midterm_all_data_predicted,short_term_data_predicted){
library(ggplot2)
library(patchwork)
combined_model_results <- short_term_data_predicted[,1:8]
combined_model_results$long_term_model <- 0
for (year in unique(combined_model_results$year)){
combined_model_results$long_term_model[combined_model_results$year==year]  <-
longterm_all_data_predicted$longterm_model_predictions[longterm_all_data_predicted$year==year]
}
combined_model_results$mid_term_model <- 0
for (i in 1:nrow(midterm_all_data_predicted)){
combined_model_results$mid_term_model[((i-1)*24+1):(i*24)] <-
midterm_all_data_predicted$midterm_model_fit[i]
}
combined_model_results$short_term_model <- short_term_data_predicted$short_term_lm_model_predictions
combined_model_results$complete_model <- combined_model_results$long_term_model+
combined_model_results$mid_term_model + combined_model_results$short_term_model
training_set_ratio <- unique(longterm_all_data_predicted$training_set_ratio)
year_training_set=nrow(longterm_all_data_predicted)- round(nrow(longterm_all_data_predicted)*training_set_ratio)
end_of_training_set=max(which(combined_model_results$year== longterm_all_data_predicted$year[year_training_set]))
training_mape=MLmetrics::MAPE(combined_model_results$complete_model[1:end_of_training_set],combined_model_results$hourly_demand[1:end_of_training_set])
test_mape=MLmetrics::MAPE(combined_model_results$complete_model[(end_of_training_set+1):nrow(combined_model_results)],combined_model_results$hourly_demand[(end_of_training_set+1):nrow(combined_model_results)])
RSQUARE_training = cor(combined_model_results$hourly_demand[1:end_of_training_set],combined_model_results$complete_model[1:end_of_training_set])^2
RSQUARE_test = cor(combined_model_results$hourly_demand[(end_of_training_set+1):nrow(combined_model_results)],combined_model_results$complete_model[(end_of_training_set+1):nrow(combined_model_results)])^2
training_rmse=MLmetrics::RMSE(combined_model_results$complete_model[1:end_of_training_set],combined_model_results$hourly_demand[1:end_of_training_set])
test_rmse=MLmetrics::RMSE(combined_model_results$complete_model[(end_of_training_set+1):nrow(combined_model_results)],combined_model_results$hourly_demand[(end_of_training_set+1):nrow(combined_model_results)])
cat("\n*** Final Model Metrics ***\n
MAPE\nTraining Set:",round(training_mape,4),"\nTest Set:    ",round(test_mape,4),"\n
RSQUARE\nTraining Set:",round(RSQUARE_training,4),"\nTest Set:    ",round(RSQUARE_test,4),"\n
ACCURACY\nTraining Set:",round((1-training_mape)*100,2),"%\nTest Set:    ",round((1-test_mape)*100,2),"%\n
RMSE\nTraining Set:",round(training_rmse,1),"MW\nTest Set:    ",round(test_rmse,1),"MW\n\n")
full_plot <- ggplot(combined_model_results)+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+xlab("\nYear")+ylab("Hourly Demand\n [MW]\n")+
geom_vline(xintercept=combined_model_results$date[end_of_training_set],linetype=2)+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("Hourly Demand\n [MW]\n")+
ggtitle(paste("Complete Model Results -",country,"\n"))+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())
full_plot
full_plot2 <- ggplot(combined_model_results)+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+xlab("\nYear")+ylab("Hourly Demand\n [MW]\n")+
geom_vline(xintercept=combined_model_results$date[end_of_training_set],linetype=2)+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("Hourly Demand\n [MW]\n")+
ggtitle(paste("Complete Model Results -",country,"\n"))+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())+
theme(axis.title=element_text(size=23))+
theme(legend.text=element_text(size=23))+
theme(axis.text=element_text(size=20))+
theme(plot.title = element_text(size=26))
if (! file.exists(country)){
dir.create(country)}
if (! file.exists(paste0("./",country,"/plots"))){
dir.create(paste0("./",country,"/plots"))}
ggsave(file=paste0("./",country,"/plots/complete_model_results.png"), plot=full_plot2, width=12, height=8)
###
sample_week_index <-nrow(combined_model_results)-(nrow(combined_model_results)-end_of_training_set)*0.45
week_start <- which(combined_model_results$wday[sample_week_index:(sample_week_index+200)]==
"Mon")[1]+sample_week_index
sample_year <- combined_model_results$year[week_start]
full_plot_sample_week <- ggplot(combined_model_results[week_start:(week_start+335),])+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("[MW]\n")+
ggtitle(paste("Complete Model Results -",country),subtitle = paste("2 sample weeks in",sample_year,"\n") )+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())
print(full_plot_sample_week)
full_plot_sample_week2 <- ggplot(combined_model_results[week_start:(week_start+335),])+geom_line(aes(date,hourly_demand,color="actual"))+
geom_line(aes(date,complete_model,color="fitted"))+
ggthemes::theme_foundation(base_size=14, base_family="sans")+
xlab("\nHour")+ylab("[MW]\n")+
ggtitle(paste("Complete Model Results -",country),subtitle = paste("2 sample weeks in",sample_year,"\n") )+
theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold"))+
theme(legend.title = element_blank())+
theme(axis.title=element_text(size=23))+
theme(legend.text=element_text(size=23))+
theme(axis.text=element_text(size=20))+
theme(plot.title = element_text(size=26))+
theme(plot.subtitle = element_text(size=20,hjust = 0.5))
ggsave(file=paste0("./",country,"/plots/complete_model_sample_weeks.png"), plot=full_plot_sample_week2, width=12, height=8)
stacked_plots <- full_plot/full_plot_sample_week
print(stacked_plots)
return(combined_model_results)
}
a<- orakle.combine_models(longterm_all_data_predicted,midterm_all_data_predicted,short_term_data_predicted)
rm(orakle.combine_models())
rm(orakle.combine_models)
# load orakly library
source('./library/orakle.R')
# Combine all models
combined_model_results <- orakle.combine_models(longterm_all_data_predicted,midterm_all_data_predicted,short_term_data_predicted)
# load orakly library
source('./library/orakle.R')
# Combine all models
combined_model_results <- orakle.combine_models(longterm_all_data_predicted,midterm_all_data_predicted,short_term_data_predicted)
# Get and prepare intial Data
demand_data = orakle.get_entsoE_data(2017,2021,"Ireland")
# Get and prepare intial Data
demand_data = orakle.get_entsoE_data(2017,2021,"Irland")
# Setting working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load orakle library
source('./library/orakle.R')
# Get and prepare intial Data
demand_data = orakle.get_entsoE_data(2017,2021,"Ireland")
demand_data_filled = orakle.fill_missing_entsoE_data(demand_data)
decomposed_data = orakle.decompose_load_data(demand_data_filled)
all_data=demand_data
resolution <- as.numeric(difftime(all_data$Date[2], all_data$Date[1],"hours"))
resolution
View(all_data)
difftime(all_data$Date[2], all_data$Date[1],"hours")
? difftime
resolution <- as.numeric(difftime(all_data$Date[2], all_data$Date[1],units="hours"))
resolution
# load orakle library
source('./library/orakle.R')
decomposed_data = orakle.decompose_load_data(demand_data_filled)
resolution <- as.numeric(difftime(all_data$Date[2], all_data$Date[1],units="hours"))
if (resolution <= 1){
timepoint <- seq(as.POSIXct(paste0(as.character(min(unique(all_data$year))),'-01-01 00:00')),
as.POSIXct(paste0(as.character(max(unique(all_data$year))),'-12-31 23:00')),by="hour")
} else{
timepoint <- seq(as.POSIXct(paste0(as.character(min(unique(all_data$year))),'-01-01')),
as.POSIXct(paste0(as.character(max(unique(all_data$year))),'-12-31')),by="day")
}
ordered_data <- as.data.frame(timepoint)
colnames(ordered_data)<- "Date"
ordered_data$year <- lubridate::year(ordered_data$Date)
ordered_data$month <- lubridate::month(ordered_data$Date)
ordered_data$day <- lubridate::day(ordered_data$Date)
ordered_data$wday <- lubridate::wday(ordered_data$Date,label = T,locale = "English")
if (resolution <= 1){
ordered_data$hour <- lubridate::hour(ordered_data$Date)
if (all_data$time_interval[1] == "15 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=4))
} else if (all_data$time_interval[1] == "30 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=2))
}else{
ordered_data$load <- all_data$load
}} else{ordered_data$load <- all_data$load}
View(ordered_data)
colMeans(matrix(all_data$load, nrow=2))
length(colMeans(matrix(all_data$load, nrow=2)))
length(colMeans(matrix(all_data$load, nrow=2)))*2
87014/2/8760
if (all_data$time_interval[1] == "15 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=4))
} else if (all_data$time_interval[1] == "30 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=2))
}else{
ordered_data$load <- all_data$load
}} else{ordered_data$load <- all_data$load}
suppressWarnings(
if (resolution <= 1){
ordered_data$hour <- lubridate::hour(ordered_data$Date)
if (all_data$time_interval[1] == "15 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=4))
} else if (all_data$time_interval[1] == "30 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=2))
}else{
ordered_data$load <- all_data$load
}} else{ordered_data$load <- all_data$load}
)
View(ordered_data)
all_data<- demand_data_filled
suppressWarnings(
if (resolution <= 1){
ordered_data$hour <- lubridate::hour(ordered_data$Date)
if (all_data$time_interval[1] == "15 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=4))
} else if (all_data$time_interval[1] == "30 mins"){
ordered_data$load <- colMeans(matrix(all_data$load, nrow=2))
}else{
ordered_data$load <- all_data$load
}} else{ordered_data$load <- all_data$load}
)
ordered_data$unit <- unique(all_data$unit)
ordered_data$country <- unique(all_data$country)
all_data <- ordered_data
all_data <- all_data[! (all_data$month==2 & all_data$day==29),]
longterm <- data.frame(matrix(nrow=length(unique(all_data$year)),ncol=3))
colnames(longterm)<- c("country","year","avg_hourly_demand")
longterm$year <- unique(all_data$year)
country=unique(all_data$country)
longterm$country<- country
for (i in (min(longterm$year):max(longterm$year))){
longterm$avg_hourly_demand[longterm$year==i]<- mean(all_data$load[all_data$year==i],na.rm = T)
}
if (resolution <= 1){
midterm <- data.frame(matrix(nrow=(length(unique(all_data$year))*365),ncol=7))
colnames(midterm)<- c("country","date","year","month","day","wday","avg_hourly_demand")
for (i in 1:length(unique(all_data$year))){
midterm$year[((i-1)*365+1):(i*365)] <- unique(all_data$year)[i]
}
for (i in 1:nrow(midterm)){
midterm$date[i] <- all_data$Date[((i-1)*24+1)]
midterm$month[i] <- all_data$month[((i-1)*24+1)]
midterm$day[i] <- all_data$day[((i-1)*24+1)]
midterm$wday[i] <- all_data$wday[((i-1)*24+1)]
midterm$avg_hourly_demand[i] <- mean(all_data$load[((i-1)*24+1):(i*24)],na.rm = T)
}
midterm$date <- as.POSIXct(midterm$date, format="%Y-%m-%d",origin = "1970-01-01")
midterm$date <-as.Date(midterm$date, format="%Y-%m-%d","CET")
midterm$country<- country}else{
midterm <- data.frame(matrix(nrow=nrow(ordered_data),ncol=7))
midterm[,1:7] <- ordered_data[,c(8,1:6)]
colnames(midterm)<- c("country","date","year","month","day","wday","avg_hourly_demand")
}
midterm$seasonal_avg_hourly_demand <-0
for (i in min(all_data$year):max(all_data$year)){
midterm$seasonal_avg_hourly_demand[midterm$year==i] <- midterm$avg_hourly_demand[midterm$year==i]-
longterm$avg_hourly_demand[longterm$year==i]
}
if (resolution <= 1){
shortterm <- data.frame(matrix(nrow=(nrow(all_data)),ncol=1))
colnames(shortterm) <- "country"
shortterm$country <- country
shortterm$date <- all_data$Date
shortterm$year <- all_data$year
shortterm$month <- all_data$month
shortterm$day <- all_data$day
shortterm$wday <- all_data$wday
shortterm$hour <- all_data$hour
shortterm$hourly_demand <- all_data$load
shortterm$hourly_demand_trend_corrected <- 0
for (i in min(all_data$year):max(all_data$year)){
shortterm$hourly_demand_trend_corrected[shortterm$year==i] <- shortterm$hourly_demand[shortterm$year==i]-
longterm$avg_hourly_demand[longterm$year==i]
}
shortterm$hourly_demand_trend_and_season_corrected <- 0
for (i in 1:(nrow(midterm)-1)){
shortterm$hourly_demand_trend_and_season_corrected[((i-1)*24+1):(i*24)] <-
shortterm$hourly_demand_trend_corrected[((i-1)*24+1):(i*24)]- midterm$seasonal_avg_hourly_demand[i]
}
shortterm_seasonality_plot <-  ggplot(shortterm)+geom_line(aes(1:nrow(shortterm),hourly_demand_trend_and_season_corrected, color="Average hourly demand"),linewidth=1.1)+
theme(legend.title = element_blank()) +ggtitle('Short-term seasonality \n')+
theme(plot.title = element_text(hjust = 0.5))+ylab("MW")+xlab("Hour")
}
trend_plot<- ggplot(longterm)+geom_line(aes(year,avg_hourly_demand, color="Average hourly demand"),linewidth=1.1)+
theme(legend.title = element_blank()) +ggtitle('Long term trend \n')+
theme(plot.title = element_text(hjust = 0.5))+ylab("MW")
midterm_seasonality_plot <-  ggplot(midterm)+geom_line(aes(1:nrow(midterm),seasonal_avg_hourly_demand, color="Average hourly demand"),linewidth=1.1)+
theme(legend.title = element_blank()) +ggtitle('Mid-term seasonality \n')+
theme(plot.title = element_text(hjust = 0.5))+ylab("MW")+xlab("Day")
if (resolution <= 1){
all_plots <- trend_plot / midterm_seasonality_plot / shortterm_seasonality_plot
print(all_plots)
return(list("longterm"=longterm, "midterm"=midterm, "shortterm"=shortterm))
} else{
all_plots <- trend_plot / midterm_seasonality_plot
print(all_plots)
return(list("longterm"=longterm, "midterm"=midterm))
}
decomposed_data = orakle.decompose_load_data(demand_data_filled)
# load orakle library
source('./library/orakle.R')
# Get and prepare intial Data
demand_data = orakle.get_entsoE_data(2017,2021,"Ireland")
decomposed_data = orakle.decompose_load_data(demand_data_filled)
# Longterm model
longterm <- orakle.get_historic_load_data(decomposed_data$longterm)
longterm_all_data <- orakle.get_macro_economic_data(longterm)
longterm_all_data_predicted <- orakle.long_term_lm(longterm_all_data)
# Midterm model
midterm = orakle.add_holidays_mid_term(decomposed_data$midterm)
midterm_all = orakle.get_weather_data(midterm)
view(midterm_all$temperature_data)
View(midterm_all$temperature_data)
midterm_all_data_predicted = orakle.mid_term_lm(midterm_all$midterm)
# Shortterm model
shortterm= orakle.add_holidays_short_term(decomposed_data$shortterm)
short_term_data_predicted <- orakle.shortterm_lm_model(shortterm)
# Combine all models
combined_model_results <- orakle.combine_models(longterm_all_data_predicted,midterm_all_data_predicted,short_term_data_predicted)
