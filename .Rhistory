### load libraries at the top
#install.packages("lubridate")
#install.packages("ggplot2")
#install.packages("MuMIn")
library(ggplot2)
library(lubridate)
library(MuMIn)
### set working directory and check if it is correct
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
vector1 <- 1:20
print(vector1)
vector1 <- 27:50
print(vector1)
dataframe1 <- as.data.frame(vector1)
View(dataframe1)
dataframe1[5,1]
View(dataframe1)
dataframe1[,1]
dataframe1[,]
dataframe1$vector1
dataframe2 <- data.frame(matrix(nrow=20,ncol=2))
View(dataframe2)
? sample()
dataframe2[,1] <- sample(1:50, 20, replace=TRUE)
View(dataframe2)
dataframe2[5,1] <- 71
dataframe2[8,1] <- 41
calc1 <- function(a,b){
c=a+b
return(c)
}
calc1(5,8)
## if statements
x=3
y=2
if (x > y){
print("Yes")
}
if (x < y){
print("Yes")
}else {print("no")}
calc1 <- function(a,b,arithmetic){
if (arithmetic=="add"){
c=a+b}
if else(arithmetic=="substract"){
calc1 <- function(a,b,arithmetic){
if (arithmetic=="add"){
c=a+b}
if (arithmetic=="substract"){
c=a-b}
return(c)
}
calc1(5,8,"substract")
for (i in 1:11){
print(i*2)
}
paste("Paste is used","to print multiple", "inputs.")
i
paste("Paste is used","to print multiple", "inputs.",i)
for (i in 1:24){
print(dataframe1[i,1])
}
getwd()
demand_data <- read.csv("demand_data.csv")
View(demand_data)
for (i in dataframe1){
print(dataframe1[i,1])
}
for (i in dataframe1){
print(dataframe1[i,])
}
for (i in dataframe1){
print(dataframe1[,i])
}
for (i in dataframe1){
print(dataframe1[i,1])
}
View(dataframe1)
nrow(dataframe1)
for (i in 1:nrow(dataframe1)){
print(dataframe1[i,1])
}
length(dataframe1)
nrow(dataframe1)
View(demand_data)
demand_data$index <- 1:nrow(demand_data)
ggplot(demand_data)+ geom_line(aes(index,load,color="Actual Load"))
# Setting working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load orakly library
source('./library/orakle.R')
# Get and prepare intial Data
demand_data = orakle.get_entsoE_data(2017,2021,"Luxembourg")
demand_data_filled = orakle.fill_missing_entsoE_data(demand_data)
decomposed_data = orakle.decompose_load_data(demand_data_filled)
